class Solution {
public:
    bool canmakepair(vector<int>nums , int p , int maxdiff){
        int count = 0;
        int i = 1;

        while(i < nums.size()){
            if(nums[i] - nums[i-1] <= maxdiff){
                count++;
                i += 2;
            }
            else{
                i += 1;
            }
            if(count >= p){
                return true;
            }
        }
        return count >= p;
    }
    int minimizeMax(vector<int>& nums, int p) {

        if(p == 0) return 0;
        sort(nums.begin() , nums.end());
        int left =0 ; 
        int right = nums.back() - nums.front();

        int result = right;

        while(left <= right){
            int mid = left + (right - left)/2;

            if(canmakepair(nums,p,mid)){
                result = mid;
                right = mid - 1;
            }
            else{
                left = mid + 1;
            }
        }
        return result;
    }
};
