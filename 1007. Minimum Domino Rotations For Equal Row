class Solution {
public:
    int minDominoRotations(vector<int>& tops, vector<int>& bottoms) {
        int count1 = 0, count2 = 0, count3 = 0, count4 = 0;
        int num1 = tops[0];
        int num2 = bottoms[0];
        int n = tops.size();

        for (int i = 0; i < n; ++i) {
            // For num1 - making all tops = num1
            if (count1 != INT_MAX) {
                if (tops[i] == num1) {
                    // no swap
                } else if (bottoms[i] == num1) {
                    count1++;
                } else {
                    count1 = INT_MAX;
                }
            }

            // For num1 - making all bottoms = num1
            if (count2 != INT_MAX) {
                if (bottoms[i] == num1) {
                    // no swap
                } else if (tops[i] == num1) {
                    count2++;
                } else {
                    count2 = INT_MAX;
                }
            }

            // For num2 - making all bottoms = num2
            if (count3 != INT_MAX) {
                if (bottoms[i] == num2) {
                    // no swap
                } else if (tops[i] == num2) {
                    count3++;
                } else {
                    count3 = INT_MAX;
                }
            }

            // For num2 - making all tops = num2
            if (count4 != INT_MAX) {
                if (tops[i] == num2) {
                    // no swap
                } else if (bottoms[i] == num2) {
                    count4++;
                } else {
                    count4 = INT_MAX;
                }
            }
        }

        int ans = min({count1, count2, count3, count4});
        return (ans == INT_MAX) ? -1 : ans;
    }
};
