#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    bool dfs(int node, vector<vector<int>> &adj, vector<int> &visited) {
        visited[node] = 1; // visiting
        
        for (int neighbour : adj[node]) {
            if (visited[neighbour] == 0) {
                if (dfs(neighbour, adj, visited))
                    return true; // cycle found
            } else if (visited[neighbour] == 1) {
                return true; // cycle found
            }
        }
        
        visited[node] = 2; // visited
        return false;
    }

    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> adj(numCourses);
        for (auto &p : prerequisites) {
            adj[p[1]].push_back(p[0]); // p[1] must come before p[0]
        }

        vector<int> visited(numCourses, 0); // 0: unvisited, 1: visiting, 2: visited

        for (int i = 0; i < numCourses; i++) {
            if (visited[i] == 0) {
                if (dfs(i, adj, visited))
                    return false; // cycle found
            }
        }

        return true; // no cycle
    }
};
