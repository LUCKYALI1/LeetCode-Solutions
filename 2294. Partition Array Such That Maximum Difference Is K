// class Solution {
// public:
//     int partitionArray(vector<int>& nums, int k) {
//         sort(nums.begin() , nums.end());
//         int groups_Count = 1;
//         int min_Val = nums[0];

//         for(int i = 1 ; i < nums.size() ; i++){
//             if(nums[i] - min_Val > k){
//                 min_Val = nums[i];
//                 groups_Count++;
//             }

//         }
//         return groups_Count;
        

//     }
// };
class Solution {
public:
    bool isPossible(vector<int>& nums, int k, int maxGroups) {
        int n = nums.size();
        int groups = 1;
        int minVal = nums[0];

        for(int i = 1; i < n; i++) {
            if(nums[i] - minVal > k) {
                groups++;
                minVal = nums[i];
            }
        }
        return groups <= maxGroups;
    }

    int partitionArray(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());

        int low = 1, high = nums.size();
        int ans = high;

        while(low <= high) {
            int mid = (low + high) / 2;
            if(isPossible(nums, k, mid)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }
};
