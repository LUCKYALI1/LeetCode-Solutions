1382. Balance a Binary Search Tree/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void getInorder(TreeNode* root , vector<int>& num){
        if(!root){
            return ;
        }
        getInorder(root -> left , num);
        num.push_back(root -> val);
        getInorder(root -> right ,num);
    }

    TreeNode* inorderToBST(int s , int e , vector<int> inorder){
        if(s > e)
            return NULL;
        int mid = (s+e)/2;
        TreeNode* root = new TreeNode(inorder[mid]);

        root -> left = inorderToBST(s , mid -1 , inorder);
        root -> right = inorderToBST(mid + 1 , e , inorder);

        return root;
    }
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> inorder;
        getInorder(root,inorder);
        return inorderToBST(0 , inorder.size()-1 , inorder);
    }
};
