/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        queue<pair<TreeNode*, int>> q;
        vector<vector<int>> ans;
        map<int, vector<int>> ans_mp;
        q.push({root, 0});
        
        while (!q.empty()) {
            int n = q.size();
            map<int, vector<int>> mp;
            for (int i = 0; i < n; i++) {
                TreeNode* curr = q.front().first;
                int line = q.front().second;
                
                mp[line].push_back(curr->val);
                if (curr->left) q.push({curr->left, line - 1});
                if (curr->right) q.push({curr->right, line + 1});
                q.pop();
            }
            for (auto& it : mp) {
                sort(it.second.begin(), it.second.end());
                ans_mp[it.first].insert(ans_mp[it.first].end(), it.second.begin(), it.second.end());
            }
        }
        
        for (auto& x : ans_mp) {
            ans.push_back(x.second);
        }
        return ans;
    }
};
