class Solution {
public:
 int findMaxFish(vector<vector<int>>& grid) {
        int rows = grid.size();
        int cols = grid[0].size();
        int maxFish = 0;

        function<int(int, int)> dfs = [&](int i, int j) {
            if (i < 0 || j < 0 || i >= rows || j >= cols || grid[i][j] == 0)
                return 0;

            int fishCount = grid[i][j];
            grid[i][j] = 0; 

            fishCount += dfs(i + 1, j);
            fishCount += dfs(i - 1, j);
            fishCount += dfs(i, j + 1);
            fishCount += dfs(i, j - 1);

            return fishCount;
        };

        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                if (grid[i][j] > 0) {
            
                    int currentFish = dfs(i, j);
                    maxFish = max(maxFish, currentFish);
                }
            }
        }

        return maxFish;
    }
};
