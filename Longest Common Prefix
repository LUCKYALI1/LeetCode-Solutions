class TrieNode {
public:
    char data;
    TrieNode* children[26];
    int childCount;
    bool isTerminal;

    TrieNode(char ch) {
        data = ch;
        for (int i = 0; i < 26; i++) {
            children[i] = NULL;
        }
        childCount = 0;
        isTerminal = false;
    }
};

class Trie {
public:
    TrieNode* root;

    Trie(char ch) {
        root = new TrieNode(ch);
    }

    void insert(TrieNode* root, string word) {
        // Base condition
        if (word.length() == 0) {
            root->isTerminal = true;
            return;
        }

        int index = word[0] - 'a';
        TrieNode* child;

        // Present
        if (root->children[index] != NULL) {
            child = root->children[index];
        }
        // Absent
        else {
            child = new TrieNode(word[0]);
            root->children[index] = child;
            root->childCount++;  // increment child count
        }

        insert(child, word.substr(1));
    }

    void insertIntoTrie(string word) {
        insert(root, word);
    }

    void lcp(string str, string& ans) {
        TrieNode* curr = root;
        for (int i = 0; i < str.size(); i++) {
            char ch = str[i];

            if (curr->childCount == 1 && !curr->isTerminal) {
                ans.push_back(ch);
                int index = ch - 'a';
                curr = curr->children[index];
            }
            else {
                break;
            }
        }
    }
};

class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        if (strs.empty()) return "";

        Trie* t = new Trie('\0');
        for (int i = 0; i < strs.size(); i++) {
            t->insertIntoTrie(strs[i]);
        }

        string first = strs[0];
        string ans = "";

        t->lcp(first, ans);
        return ans;
    }
};
