class Solution {
public:
   
bool isValidSudoku(vector<vector<char>>& board) {
    // Check each row
    for (int i = 0; i < 9; ++i) {
        unordered_set<char> rowSet;
        for (int j = 0; j < 9; ++j) {
            if (board[i][j] != '.') {
                if (rowSet.find(board[i][j]) != rowSet.end())
                    return false;
                rowSet.insert(board[i][j]);
            }
        }
    }

    // Check each column
    for (int j = 0; j < 9; ++j) {
        unordered_set<char> colSet;
        for (int i = 0; i < 9; ++i) {
            if (board[i][j] != '.') {
                if (colSet.find(board[i][j]) != colSet.end())
                    return false;
                colSet.insert(board[i][j]);
            }
        }
    }

    // Check each 3x3 sub-grid
    for (int boxRow = 0; boxRow < 9; boxRow += 3) {
        for (int boxCol = 0; boxCol < 9; boxCol += 3) {
            unordered_set<char> boxSet;
            for (int i = boxRow; i < boxRow + 3; ++i) {
                for (int j = boxCol; j < boxCol + 3; ++j) {
                    if (board[i][j] != '.') {
                        if (boxSet.find(board[i][j]) != boxSet.end())
                            return false;
                        boxSet.insert(board[i][j]);
                    }
                }
            }
        }
    }

    return true;
}
};
