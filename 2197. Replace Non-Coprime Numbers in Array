#include <bits/stdc++.h>
using namespace std;

class Solution {
    int gcd(int a, int b) {
        return __gcd(a, b);
    }

    long long lcm(long long a, long long b) {
        return (a / gcd(a, b)) * b;
    }

public:
    vector<int> replaceNonCoprimes(vector<int>& nums) {
        vector<long long> st; // use long long to avoid overflow

        for (int num : nums) {
            st.push_back(num);

            // keep merging if last two are not coprime
            while (st.size() > 1) {
                long long a = st.back();
                long long b = st[st.size() - 2];

                long long g = gcd(a, b);

                if (g == 1) break; // coprime â†’ stop

                // replace last two with their LCM
                st.pop_back();
                st.pop_back();
                st.push_back(lcm(a, b));
            }
        }

        // convert back to int
        vector<int> result(st.begin(), st.end());
        return result;
    }
};
