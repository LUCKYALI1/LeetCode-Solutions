class WordDictionary {
private:
    struct TrieNode {
        bool isEnd;
        TrieNode* children[26];

        TrieNode() {
            isEnd = false;
            for (int i = 0; i < 26; i++) {
                children[i] = nullptr;
            }
        }
    };

    TrieNode* root;

    void insertRec(TrieNode* node, const string& word, int index) {
        if (index == word.length()) {
            node->isEnd = true;
            return;
        }

        int i = word[index] - 'a';
        TrieNode* child;

        if (node->children[i] != nullptr) {
            child = node->children[i];
        } else {
            child = new TrieNode();
            node->children[i] = child;
        }

        insertRec(child, word, index + 1);
    }

    // Wildcard-enabled recursive search
    bool searchRec(TrieNode* node, const string& word, int index) {
        if (!node) return false;

        if (index == word.length()) {
            return node->isEnd;
        }

        if (word[index] == '.') {
            for (int i = 0; i < 26; i++) {
                if (node->children[i] && searchRec(node->children[i], word, index + 1)) {
                    return true;
                }
            }
            return false;
        }

        int i = word[index] - 'a';
        if (node->children[i]) {
            return searchRec(node->children[i], word, index + 1);
        }

        return false;
    }

public:
    WordDictionary() {
        root = new TrieNode();
    }

    void addWord(string word) {
        insertRec(root, word, 0);
    }

    bool search(string word) {
        return searchRec(root, word, 0);
    }
};
