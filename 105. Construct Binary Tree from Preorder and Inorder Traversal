class Solution {
public:
    int findPosition(const vector<int>& in, int element, int n) {
        for (int i = 0; i < n; i++) {
            if (in[i] == element)
                return i;
        }
        return -1;
    }

    TreeNode* solve(const vector<int>& pre, const vector<int>& in, int& index, int start, int end, int n) {
        if (index >= n || start > end) {
            return nullptr;
        }

        int element = pre[index++];
        TreeNode* root = new TreeNode(element);
        int position = findPosition(in, element, n);

        root->left = solve(pre, in, index, start, position - 1, n);
        root->right = solve(pre, in, index, position + 1, end, n);

        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int index = 0;
        int n = inorder.size();
        return solve(preorder, inorder, index, 0, n - 1, n);
    }
};
