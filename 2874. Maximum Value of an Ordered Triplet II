class Solution {
public:
    long long maximumTripletValue(vector<int>& nums) {
        int n = nums.size();
        if (n < 3) return 0; // Not enough elements

        long long maxValue = 0;

        // Prefix max to store max nums[i] till index j
        vector<int> prefixMax(n, 0);
        prefixMax[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefixMax[i] = max(prefixMax[i - 1], nums[i]);
        }

        // Suffix max to store max nums[k] from index j+1 to n
        vector<int> suffixMax(n, 0);
        suffixMax[n - 1] = nums[n - 1];
        for (int k = n - 2; k >= 0; k--) {
            suffixMax[k] = max(suffixMax[k + 1], nums[k]);
        }

        // Iterate through nums[j] and calculate the maximum triplet value
        for (int j = 1; j < n - 1; j++) {
            long long left = prefixMax[j - 1];  // max nums[i] for i < j
            long long right = suffixMax[j + 1]; // max nums[k] for k > j
            maxValue = max(maxValue, (left - nums[j]) * right);
        }

        return maxValue;
    }
};
