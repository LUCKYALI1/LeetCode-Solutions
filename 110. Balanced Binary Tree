class Solution {
private:
    int height(TreeNode* root){
        if(root == NULL){
            return 0;
        }
        int left = height(root -> left);
        int right = height(root -> right);

        int ans = max(left,right)+1;
        return ans;
    }

    pair<bool , int> isbalancedfast(TreeNode* root){

        if(root == NULL){
           pair<bool , int> p = make_pair(true , 0);
           return p;
        }

        pair<int , int> left = isbalancedfast(root -> left);
        pair<int , int> right = isbalancedfast(root -> right);

        bool leftans = left.first;
        bool rightans = right.first;

        bool diff = abs(left.second - right.second) <=1;

        pair<bool , int> ans;
        ans.second = max(left.second , right.second ) +1 ;

        if(leftans && rightans && diff){
            ans.first =true;
        }
        else{
            ans.first= false;
        }
        return ans;

    }
    
public:
    bool isBalanced(TreeNode* root) {
        return isbalancedfast(root).first; 
    }
};
