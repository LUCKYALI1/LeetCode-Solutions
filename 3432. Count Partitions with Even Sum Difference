class Solution {
public:
    int countPartitions(vector<int>& nums) {
        // int n = nums.size();
        // vector<int> prefix(n);
        // prefix[0] = nums[0];

        // for (int i = 1; i < n; i++) {
        //     prefix[i] = prefix[i - 1] + nums[i];
        // }

        // int totalSum = prefix[n - 1];
        // int count = 0;

        // for (int i = 0; i < n - 1; i++) {
        //     int left = prefix[i];
        //     int right = totalSum - left;
        //     if ((left - right) % 2 == 0) {
        //         count++;
        //     }
        // }

        // return count;
        int ans = 0, lsum = 0, rsum = accumulate(nums.begin(), nums.end(), 0);
        for (int i = 0; i + 1 < nums.size(); ++i) {
            rsum -= nums[i];
            lsum += nums[i];
            if (abs(rsum - lsum) % 2 == 0)
                ans++;
        }
        return ans;
    }
};
