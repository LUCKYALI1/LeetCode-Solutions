class Solution {
public:
    // int findLHS(vector<int>& nums) {
    //     int maxCount = 0;

    //     for (int i = 0; i < nums.size(); i++) {
    //         int count = 0;
    //         bool found = false;

    //         for (int j = 0; j < nums.size(); j++) {
    //             if (nums[j] == nums[i]) {
    //                 count++;
    //             } else if (nums[j] == nums[i] + 1) {
    //                 count++;
    //                 found = true;
    //             }
    //         }

    //         if (found) {
    //             maxCount = max(maxCount, count);
    //         }
    //     }

    //     return maxCount;
    // }

    int findLHS(vector<int>& nums) {
        unordered_map<int, int> freq;

        // First loop: count frequency of each element
        for (int num : nums) {
            freq[num]++;
        }

        int maxLength = 0;

        // Second loop: check if num+1 exists
        for (auto& pair : freq) {
            int key = pair.first;
            if (freq.count(key + 1)) {
                int length = freq[key] + freq[key + 1];
                maxLength = max(maxLength, length);
            }
        }

        return maxLength;
    }
};
