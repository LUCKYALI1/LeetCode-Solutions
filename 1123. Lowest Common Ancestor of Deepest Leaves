class Solution {
public:
    vector<TreeNode*> getDeepestLeaves(TreeNode* root) {
        if (!root) return {};
        queue<TreeNode*> q;
        q.push(root);
        vector<TreeNode*> deepest;

        while (!q.empty()) {
            int size = q.size();
            deepest.clear(); 
            for (int i = 0; i < size; ++i) {
                TreeNode* node = q.front(); q.pop();
                deepest.push_back(node);
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
        }

        return deepest;
    }

    TreeNode* findLCA(TreeNode* root, unordered_set<TreeNode*>& deepestSet) {
        if (!root || deepestSet.count(root)) return root;

        TreeNode* left = findLCA(root->left, deepestSet);
        TreeNode* right = findLCA(root->right, deepestSet);

        if (left && right) return root;
        return left ? left : right;
    }

    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        vector<TreeNode*> deepest = getDeepestLeaves(root); 
        unordered_set<TreeNode*> deepestSet(deepest.begin(), deepest.end());
        return findLCA(root, deepestSet); 
    }
};
