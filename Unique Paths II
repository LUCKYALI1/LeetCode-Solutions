class Solution {
public:
    int solve(int r, int c, vector<vector<int>>& grid, vector<vector<int>>& dp) {
        // Out of bounds
        if (r < 0 || c < 0) return 0;

        // Obstacle
        if (grid[r][c] == 1) return 0;

        // Reached start
        if (r == 0 && c == 0) return 1;

        // Already computed
        if (dp[r][c] != -1) return dp[r][c];

        // Compute paths from top and left
        int up = solve(r - 1, c, grid, dp);
        int left = solve(r, c - 1, grid, dp);

        return dp[r][c] = up + left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int r = obstacleGrid.size();
        int c = obstacleGrid[0].size();

        // If starting or ending point is blocked
        if (obstacleGrid[0][0] == 1 || obstacleGrid[r - 1][c - 1] == 1)
            return 0;

        vector<vector<int>> dp(r, vector<int>(c, -1));
        return solve(r - 1, c - 1, obstacleGrid, dp);
    }
};
