class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> safe(n, 0);
        vector<int> result;
        function<bool(int)> dfs = [&](int node) {
            if (safe[node] > 0)
                return safe[node] == 1;
            safe[node] = 2;
            for (int neighbor : graph[node]) {
                if (!dfs(neighbor))
                    return false;
            }
            safe[node] = 1;
            return true;
        };

        for (int i = 0; i < n; i++) {
            if (dfs(i))
                result.push_back(i);
        }
        return result;
    }
};
